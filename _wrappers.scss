@charset "UTF-8";

@use "../vars";
@use "mixins" as mx;
@import "bootstrap-required";

// A container is for styling the entire width of a section. A wrapper is for styling and centering the max-width content inside it.

// This is a helper. Used to create a full width block as wrapper to actual container/div/content.
// Even if you have a container with a max-width, you can still have a full width block (this block) as wrapper to use background color (or maybe something else).
.container {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;

    &.cols-if-tablet {
        @include mx.breakpoint-max(vars.$tablet) {
            flex-direction: row;
        }
    }
}

// ------------ Template with sidebar styles ------------
.container-with-sidebar {
    display: flex;
    flex-direction: row;
    gap: vars.$container-with-sidebar-gap;

    //padding-right: calc(#{$container-padding-x} * .5);
    //padding-left: calc(#{$container-padding-x} * .5);
    padding-right: vars.$post-content-spacing-x;
    padding-left: vars.$post-content-spacing-x;
    margin-right: auto;
    margin-left: auto;
    width: rfs-value(vars.$container-with-sidebar-max-width);
    max-width: rfs-value(vars.$container-with-sidebar-max-width);

    @include mx.breakpoint-max(calc(rfs-value(vars.$container-with-sidebar-max-width) + rfs-value(vars.$post-content-spacing-x * 2))) {
        width: 100%;
    }

    .sidebar {
        flex-shrink: 0;
        flex-basis: rfs-value(vars.$sidebar-content-width);
        width: rfs-value(vars.$sidebar-content-width);
        max-width: rfs-value(vars.$sidebar-content-width);
    }
}

// This wrapper is to set right paddings for the content.
// Use it inside as a final wrapper.
.content-wrapper {
    @include make-container($container-padding-x);
    // Make sure to define this width after the mixin to override
    // `width: 100%` generated by `make-container()`
}

// Wrapper for the content of the post.
.content-block-fluid {
    //padding-right: calc(#{$container-padding-x} * .5);
    //padding-left: calc(#{$container-padding-x} * .5);
    padding-right: vars.$post-content-spacing-x;
    padding-left: vars.$post-content-spacing-x;
    margin-right: auto;
    margin-left: auto;
    width: rfs-value(vars.$post-content-max-width);
    //max-width: 100vw;
    max-width: rfs-value(vars.$post-content-max-width);

    @include mx.breakpoint-max(calc(rfs-value(vars.$post-content-max-width) + rfs-value(vars.$post-content-spacing-x * 2))) {
        width: 100%;
    }

    &.content-width-wider {
        width: rfs-value(vars.$container-wider-max-width);
        max-width: rfs-value(vars.$container-wider-max-width);

        @include mx.breakpoint-max(calc(rfs-value(vars.$container-wider-max-width) + rfs-value(vars.$post-content-spacing-x * 2))) {
            width: 100%;
        }
    }

    &.content-width-narrow {
        width: rfs-value(vars.$container-narrow-max-width);
        max-width: rfs-value(vars.$container-narrow-max-width);

        @include mx.breakpoint-max(calc(rfs-value(vars.$container-narrow-max-width) + rfs-value(vars.$post-content-spacing-x * 2))) {
            width: 100%;
        }
    }
}

// Standard padding for content.
.content-padding-x-0 {
    padding-top: rfs-value(vars.$post-content-spacing-y);
    padding-bottom: rfs-value(vars.$post-content-spacing-y);
}

// Standard padding for content.
.content-padding-y {
    padding-top: rfs-value(vars.$post-content-spacing-y);
    padding-bottom: rfs-value(vars.$post-content-spacing-y);
}

// This wrapper is for main content in the page: blog post, page, etc.
// Does not work for the Gutenberg blocks. Use .content-wrapper instead.
.content-grid {
    --padding-inline: #{vars.$post-content-spacing-x};
    --content-max-width: #{vars.$post-content-max-width};
    --breakout-content-max-width: #{vars.$breakout-content-max-width};
    --breakout-size: calc(
            (var(--breakout-content-max-width) - var(--content-max-width)) / 2
    );

    display: grid;
    // This is the grid templates: full-width, breakout, content
    grid-template-columns:
    [full-width-start] minmax(var(--padding-inline), 1fr)
    [breakout-start] minmax(0, var(--breakout-size))
    [content-start] min(
      100% - (var(--padding-inline) * 2),
      var(--content-max-width)
    )
    [content-end]
    minmax(0, var(--breakout-size)) [breakout-end]
    minmax(var(--padding-inline), 1fr) [full-width-end];

    // Add classes for each grid template.
    > .breakout {
        grid-column: breakout;
    }

    > .full-width {
        grid-column: full-width;

        // Why this?
        //display: grid;
        //grid-template-columns: inherit;
    }

    > :not(.breakout, .full-width), // Sets default template for all children.
    .full-width > :not(.breakout, .full-width) // Sets default template for all children of a full-width. (check this)
    {
        grid-column: content;
    }
}

//.full-width > :not(.breakout, .full-width) {
//    grid-column: content;
//}

img.full-width {
    width: 100%;
    max-height: 45vh;
    object-fit: cover;
}

.with-background {
    background-repeat: no-repeat;
    background-attachment: scroll;
    background-size: cover; // Adjust image size by smaller side.
    background-position: center;
    background-origin: padding-box;
    background-clip: border-box;
}

//.container {
//    @include make-container();
//}
//
//.row {
//    @include make-row();
//}
//
//.col {
//    @include make-col();
//}