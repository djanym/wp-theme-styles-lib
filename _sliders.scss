@charset "UTF-8";

@use "../vars";
@use "mixins" as mx;
@use "functions" as fn;

//@import "../../../node_modules/bootstrap/scss/carousel";

// Notes on the classes:
//
// 1. .carousel.pointer-event should ideally be pan-y (to allow for users to scroll vertically)
//    even when their scroll action started on a carousel, but for compatibility (with Firefox)
//    we're preventing all actions instead
// 2. The .carousel-item-start and .carousel-item-end is used to indicate where
//    the active slide is heading.
// 3. .active.carousel-item is the current slide.
// 4. .active.carousel-item-start and .active.carousel-item-end is the current
//    slide in its in-transition state. Only one of these occurs at a time.
// 5. .carousel-item-next.carousel-item-start and .carousel-item-prev.carousel-item-end
//    is the upcoming slide in transition.

.carousel {
    position: relative;
}

.carousel.pointer-event {
    touch-action: pan-y;
}

.carousel-inner {
    position: relative;
    width: 100%;
    overflow: hidden;
    @include mx.clearfix();
}

.carousel-item {
    position: relative;
    display: none;
    float: left;
    width: 100%;
    margin-right: -100%;
    backface-visibility: hidden;
    @include mx.transition(vars.$slider-transition);
}

.carousel-item.active,
.carousel-item-next,
.carousel-item-prev {
    display: block;
}

.carousel-item-next:not(.carousel-item-start),
.active.carousel-item-end {
    transform: translateX(100%);
}

.carousel-item-prev:not(.carousel-item-end),
.active.carousel-item-start {
    transform: translateX(-100%);
}


//
// Alternate transitions
//

.carousel-fade {
    .carousel-item {
        opacity: 0;
        transition-property: opacity;
        transform: none;
    }

    .carousel-item.active,
    .carousel-item-next.carousel-item-start,
    .carousel-item-prev.carousel-item-end {
        z-index: 1;
        opacity: 1;
    }

    .active.carousel-item-start,
    .active.carousel-item-end {
        z-index: 0;
        opacity: 0;
        @include mx.transition(opacity 0s vars.$slider-transition-duration);
    }
}


//
// Left/right controls for nav
//

.carousel-control-prev,
.carousel-control-next {
    position: absolute;
    top: 0;
    bottom: 0;
    z-index: 1;
    // Use flex for alignment (1-3)
    display: flex; // 1. allow flex styles
    align-items: center; // 2. vertically center contents
    justify-content: center; // 3. horizontally center contents
    width: vars.$slider-control-width;
    padding: 0;
    color: vars.$slider-control-color;
    text-align: center;
    background: none;
    filter: var(--#{vars.$variable-prefix}carousel-control-icon-filter);
    border: 0;
    opacity: vars.$slider-control-opacity;
    @include mx.transition(vars.$slider-control-transition);

    // Hover/focus state
    &:hover,
    &:focus {
        color: vars.$slider-control-color;
        text-decoration: none;
        outline: 0;
        opacity: vars.$slider-control-hover-opacity;
    }
}

.carousel-control-prev {
    left: 0;
    background-image: if(vars.$slider-enable-gradients, linear-gradient(90deg, rgba(vars.$clr-dark-1, .25), rgba(vars.$clr-dark-1, .001)), null);
}

.carousel-control-next {
    right: 0;
    background-image: if(vars.$slider-enable-gradients, linear-gradient(270deg, rgba(vars.$clr-dark-1, .25), rgba(vars.$clr-dark-1, .001)), null);
}

// Icons for within
.carousel-control-prev-icon,
.carousel-control-next-icon {
    display: inline-block;
    width: vars.$slider-control-icon-width;
    height: vars.$slider-control-icon-width;
    background-repeat: no-repeat;
    background-position: 50%;
    background-size: 100% 100%;
}

.carousel-control-prev-icon {
    background-image: fn.escape-svg(vars.$slider-control-prev-icon-bg) #{"/*rtl:" + fn.escape-svg(vars.$slider-control-next-icon-bg) + "*/"};
}

.carousel-control-next-icon {
    background-image: fn.escape-svg(vars.$slider-control-next-icon-bg) #{"/*rtl:" + fn.escape-svg(vars.$slider-control-prev-icon-bg) + "*/"};
}

// Optional indicator pips/controls
//
// Add a container (such as a list) with the following class and add an item (ideally a focusable control,
// like a button) with data-bs-target for each slide your carousel holds.

.carousel-indicators {
    position: absolute;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 2;
    display: flex;
    justify-content: center;
    padding: 0;
    // Use the .carousel-control's width as margin so we don't overlay those
    margin-right: vars.$slider-control-width;
    margin-bottom: 1rem;
    margin-left: vars.$slider-control-width;

    [data-bs-target] {
        box-sizing: content-box;
        flex: 0 1 auto;
        width: vars.$slider-indicator-width;
        height: vars.$slider-indicator-height;
        padding: 0;
        margin-right: vars.$slider-indicator-spacer;
        margin-left: vars.$slider-indicator-spacer;
        text-indent: -999px;
        cursor: pointer;
        background-color: var(--#{vars.$variable-prefix}carousel-indicator-active-bg);
        background-clip: padding-box;
        border: 0;
        // Use transparent borders to increase the hit area by 10px on top and bottom.
        border-top: vars.$slider-indicator-hit-area-height solid transparent;
        border-bottom: vars.$slider-indicator-hit-area-height solid transparent;
        opacity: vars.$slider-indicator-opacity;
        @include mx.transition(vars.$slider-indicator-transition);
    }

    .active {
        opacity: vars.$slider-indicator-active-opacity;
    }
}

.carousel-caption {
    position: absolute;
    right: (100% - vars.$slider-caption-width) * .5;
    bottom: vars.$slider-caption-spacer;
    left: (100% - vars.$slider-caption-width) * .5;
    padding-top: vars.$slider-caption-padding-y;
    padding-bottom: vars.$slider-caption-padding-y;
    color: var(--#{vars.$variable-prefix}carousel-caption-color);
    text-align: center;
}

:root,
[data-bs-theme="light"] {
    --#{vars.$variable-prefix}carousel-indicator-active-bg: #{vars.$slider-indicator-active-bg};
    --#{vars.$variable-prefix}carousel-caption-color: #{vars.$slider-caption-color};
    --#{vars.$variable-prefix}carousel-control-icon-filter: #{vars.$slider-control-icon-filter};
}

.hero-slider {
    @if vars.$slider-hero-max-height {
        max-height: vars.$slider-hero-max-height;
    }

    height: vars.$slider-hero-height;
    display: flex;

    .carousel-item {
        // Make items height adjust to max-height of the slider.
        @if vars.$slider-hero-max-height {
            height: 100%;
            display: flex;
            align-content: center;
            align-items: center;
        }

        img {
            display: block !important;
            width: 100% !important;
        }
    }

    .content-wrapper {
        position: absolute;
        z-index: 100;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        align-content: center;
        padding-top: 3rem;
        padding-bottom: 3rem;

        @if vars.$slider-hero-content-font-color {
            color: vars.$slider-hero-content-font-color;
        }
    }
}

.carousel {
    .carousel-item {
        img {
            width: 100%;
            display: block;
        }
    }
}