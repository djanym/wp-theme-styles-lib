@charset "UTF-8";

@use "../vars";
@use "mixins" as mx;
@import "bootstrap-required";

$post-content-max-width: if($post-content-max-width, $post-content-max-width, false);
$post-content-spacing-x: if($post-content-spacing-x, $post-content-spacing-x, 1rem);
$post-content-spacing-y: if($post-content-spacing-y, $post-content-spacing-y, 0);

$post-content-img-spacing-x: 1rem !default;
$post-content-img-spacing-y: 0.5rem !default;

$breakout-content-max-width: if($breakout-content-max-width, $breakout-content-max-width, $post-content-max-width);
$breakout-content-spacing-x: if($breakout-content-spacing-x, $breakout-content-spacing-x, $post-content-spacing-x);

$hr-separator-spacing-y: 2rem !default;
$mobile-breakpoint: vars.$mobile;

/**
 * Frontend WP Gutenberg block styles.
 * Should work with built-in styles enabled for the frontend.
 */
// ----------------------------------------

@mixin wp-main-styles() {
    .wp-core {
        //iframe{
        //    width: 100% !important;
        //}

        hr.wp-block-separator {
            //display: inline-block;
            //width: 100%;
            //height: 2px;
            //border: none;
            //background-color: $hr-separator-color;
            //@include margin-top($hr-separator-spacing-y);
            //@include margin-bottom($hr-separator-spacing-y);
        }

        .sticky,
        .bypostauthor,
        .gallery-caption {
            //display: normal;
        }

        .alignnone {
            @include margin(1rem 1rem 1rem 0);
        }

        .aligncenter {
            @include margin($post-content-img-spacing-y auto);
        }

        div.aligncenter {
            display: block;
        }

        .alignright {
            float: right;
            @include margin(0 0 $post-content-img-spacing-y $post-content-img-spacing-x);
        }

        .alignleft {
            float: left;
            @include margin(0 $post-content-img-spacing-x $post-content-img-spacing-y 0);
        }

        .alignright,
        .alignleft {
            @media (max-width: vars.$tablet) {
                //float: none !important;
                //@include margin(0 auto $post-content-img-spacing-y !important);
            }
        }

        .alignwide {
            @include margin-left(calc((rfs-value($post-content-max-width) - rfs-value($breakout-content-max-width)) / 2));
            @include margin-right(calc((rfs-value($post-content-max-width) - rfs-value($breakout-content-max-width)) / 2));

            $_actual-margin-x: calc($breakout-content-spacing-x * -1);
            //$_screen_width_bp: calc($breakout-content-max-width + #{$_actual-margin-x});
            $_screen_width_bp: calc($breakout-content-max-width + $breakout-content-spacing-x);

            @include mx.breakpoint-max($_screen_width_bp) { // When screen width is less than the breakout-content-max-width + margins.
                @include mx.margin-left(calc(($post-content-max-width - var(--full-width)) / 2 + $_actual-margin-x));
                @include mx.margin-right(calc(($post-content-max-width - var(--full-width)) / 2 + $_actual-margin-x));
            }

            @include mx.breakpoint-max($post-content-max-width) { /* Adjust based on the parent container's width */
                margin-left: $_actual-margin-x;
                margin-right: $_actual-margin-x;
            }
        }

        .alignfull {
            margin-left: calc((var(--half-width) - 50%) * -1);
            margin-right: calc((var(--half-width) - 50%) * -1);

            img {
                //width: 100vw;
                width: var(--full-width);
            }
        }

        .is-layout-constrained {
            .alignwide {
                $_screen_width_bp: calc($breakout-content-max-width + $breakout-content-spacing-x);

                @include mx.breakpoint-max($_screen_width_bp) { // When screen width is less than the breakout-content-max-width + margins.
                    // Because $post-content-max-width is the max-width of the content, we need
                    // to calculate a value to increase the width of the container by negative value of the margins.
                    $_margin: calc(((var(--full-width) - $post-content-max-width) / 2 - $breakout-content-spacing-x) * -1);
                    margin-left: $_margin;
                    margin-right: $_margin;
                }

                @include mx.breakpoint-max($post-content-max-width) { /* Adjust based on the parent container's width */
                    margin-left: $post-content-spacing-x;
                    margin-right: $post-content-spacing-x;
                }
            }
        }

        img {
            max-width: 100%;
            height: auto;
            border: none;

            &[class*="align"],
            &[class*="wp-image-"] {
                max-width: 100%;
                height: auto;
                border: none;
            }

            &.alignright {
                @include margin($post-content-img-spacing-y 0 $post-content-img-spacing-y $post-content-img-spacing-x);
            }

            &.alignleft {
                @include margin($post-content-img-spacing-y $post-content-img-spacing-x $post-content-img-spacing-y 0);
            }

            &.aligncenter {
                display: block;
                @include margin($post-content-img-spacing-y auto);
            }

            &#wpstats {
                display: block;
                margin: 0 auto;
            }

            &.wp-smiley {
                border: none;
                margin-bottom: 0;
                margin-top: 0;
                padding: 0;
            }
        }

        // Columns:
        .wp-block-column {
            > :last-child {
                margin-bottom: 0;
            }
        }

        // Groups:
        .wp-block-group {
            &__inner-container {
                max-width: rfs-value($post-content-max-width);
                margin: 0 auto;
                //padding-right: calc(#{$container-padding-x} * .5);
                //padding-left: calc(#{$container-padding-x} * .5);
                padding-right: vars.$post-content-spacing-x;
                padding-left: vars.$post-content-spacing-x;
                //@include clearfix(); // Not sure if we need this? Was added before. Then removed due to additional space for .is-flex container

                @if vars.$wp-block-group-items-default-gap {
                    > * {
                        @include margin-bottom($wp-block-group-items-default-gap);
                    }
                }

                > *:last-child {
                    margin-bottom: 0;
                }
            }
        }

        // Custom containers.
        .wp-block-inner-container {
            max-width: rfs-value($post-content-max-width);
            margin: 0 auto;
            //padding-right: calc(#{$container-padding-x} * .5);
            //padding-left: calc(#{$container-padding-x} * .5);
            padding-right: vars.$post-content-spacing-x;
            padding-left: vars.$post-content-spacing-x;
            @include clearfix();

            > *:last-child {
                margin-bottom: 0;
            }
        }

        .wp-block-buttons {
            display: flex;

            @if vars.$wp-block-buttons-gap {
                @include margin-bottom($wp-block-buttons-gap);
            }
        }

        .wp-block-image {
            figcaption {
                //caption-side: bottom;
                //display: table-caption;
                @include margin-bottom(0);
                //@include margin-top(0.5rem);
                text-align: center;
            }
        }

        .gallery .gallery-icon img {
            //border: none;
        }

        .posts-navigation {
            clear: both;
            text-align: center;
            @include margin(1.5rem 0);

            .nav-links > div {
                display: inline-block;
                @include margin(0 15px);
            }
        }

        .wp-caption {
            margin-bottom: $post-content-img-spacing-y;
            margin-left: 0;
            max-width: 96%;
            text-align: center;

            img {
                display: block;
                margin: 0 auto;
            }
        }

        .wp-caption-text {
            position: relative;
            font-size: .8em;
        }

        .gallery {
            margin: 0 auto;

            .gallery-item {
                margin: 0;
                float: left;
                text-align: center;
                width: 33%;
            }

            a img {
                border: none;
            }
        }

        .gallery-columns-4 {
            .gallery-item {
                width: 25%;

                img {
                    width: 100%;
                    height: auto;
                }
            }
        }

        @media only screen and (max-width: vars.$tablet) {

            embed,
            object {
                max-width: 100%;
            }

        }

        @media only screen and (max-width: vars.$mobile) {

            .gallery-columns-3 .gallery-item {
                width: 33.33%;

                img {
                    width: 100%;
                    height: auto;
                }
            }

        }

        @media only screen and (max-width: vars.$mobile) {

            .gallery-columns-2 .gallery-item {
                width: 50%;

                img {
                    width: 100%;
                    height: auto;
                }
            }

        }
    }
}

@mixin wp-comments-styles() {
    .wp-comments {
        .comments-area {
            @include mx.font(16px, 18px);

            ol, ul, li {
                margin: 0;
                padding: 0;
                list-style: none;
            }

            .comment-list,
            .comments-title {
                margin-bottom: 0.7rem;
            }

            .comment {
                $commDm: 2%;

                .comment-body {
                    padding: $commDm;
                    @include margin(0 0 $commDm 0);
                    border: 1px solid #eee;
                    background-color: #f7f7f7;

                    p {
                        margin-bottom: 7px;
                    }

                    .comment-meta {
                        margin-bottom: 7px;

                        .comment-author {
                            img {
                                float: left;
                                margin-right: 7px;
                                @include avatar(32px, 100px, $radius: false);
                            }
                        }

                        .comment-metadata {
                            font-size: 12px;
                            font-style: italic;

                            .edit-link {
                                margin-left: 7px;
                            }
                        }

                        &::after {
                            content: ".";
                            display: block;
                            clear: both;
                            visibility: hidden;
                            line-height: 0;
                            height: 0;
                        }
                    }
                }

                .children {
                    padding-left: 3%;
                }

            }

            // comment body end

            .comment-respond {
                @include margin(2rem 0);

                p {
                    margin-bottom: 7px;

                    &::after {
                        content: ".";
                        display: block;
                        clear: both;
                        visibility: hidden;
                        line-height: 0;
                        height: 0;
                    }
                }

                label {
                    margin-bottom: 5px;
                }

                .comment-form-cookies-consent {
                    label {
                        display: inline-block;
                        margin-left: 7px;
                    }
                }

                .form-control,
                textarea,
                input[type=text],
                input[type=date],
                input[type=number],
                input[type=password],
                input[type=email],
                input[type=url] {
                    width: 100%;
                    display: block;
                    width: 100%;
                    height: calc(1.5em + .75rem + 2px);
                    padding: .375rem .75rem;
                    font-size: 1rem;
                    font-weight: 400;
                    line-height: 1.5;
                    background-clip: padding-box;
                    -webkit-transition: border-color .15s ease-in-out, -webkit-box-shadow .15s ease-in-out;
                    transition: border-color .15s ease-in-out, -webkit-box-shadow .15s ease-in-out;
                    transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
                    transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out, -webkit-box-shadow .15s ease-in-out;
                }

                textarea {
                    height: auto;
                }

                button,
                input[type=submit],
                input[type=reset],
                .btn, [class*="btn-"] {
                    font-size: 16px;
                    border: none;
                    padding: 7px 30px !important;
                }
            }
        }
    }
}

@mixin enable-wp-editor-align-full() {
    > .alignwide {
        @include margin-left(calc((rfs-value($post-content-max-width) - rfs-value(vars.$breakout-content-max-width)) / 2));
        @include margin-right(calc((rfs-value($post-content-max-width) - rfs-value(vars.$breakout-content-max-width)) / 2));
    }

    > .alignfull {
        margin-left: calc((var(--half-editor-width) - 50%) * -1);
        margin-right: calc((var(--half-editor-width) - 50%) * -1);

        img {
            width: 100%;
        }
    }
}

@mixin wp-color-pallete($colors) {
    // Color pallete
    @each $name, $color in $colors {

        .has-#{$name}-color {
            color: $color !important;
        }

        .has-#{$name}-background-color {
            background-color: $color !important;
        }
    }
}

@mixin wp-font-sizes($typography) {
    @each $key, $value in $typography {

        .has-#{$key}-font-size {
            @include mx.generate-properties-from(vars.$typography-mobile, $key, true);
        }
    }
}

@mixin wp-headings($typography, $rfs: false) {
    @for $i from 1 through 6 {
        h#{$i}.wp-block {
            @if $rfs {
                @include mx.generate-rfs-properties-from($typography, h-#{$i});
            } @else {
                @include mx.generate-properties-from($typography, h-#{$i});
            }
        }
    }
}

// Generate button styles.
@mixin wp-block-button-styles(
    $buttons,
    $buttons-hover: false,
    $buttons-active: false,
    $buttons-mobile: (),
    $button-default-key: false) {
    .wp-block-button {
        // Default button styles. Separate styles also should be create based on theme-block-editor.js.
        &__link {
            @if $button-default-key {
                @include mx.generate-properties-from($buttons, $button-default-key);
            }

            &:hover, &:focus {
                @if ($button-default-key and $buttons-hover) {
                    @include mx.generate-properties-from($buttons-hover, $button-default-key);
                }
            }

            &:active {
                @if ($button-default-key and $buttons-active) {
                    @include mx.generate-properties-from($buttons-active, $button-default-key);
                }
            }
        }

        @each $key, $value in $buttons {
            &.is-style-#{$key} {
                .wp-block-button__link {
                    @include mx.generate-properties-from($buttons, $key);

                    &:hover, &:focus {
                        @if ($buttons-hover) {
                            @include mx.generate-properties-from($buttons-hover, $key);
                        }
                    }

                    &:active {
                        @if ($buttons-active) {
                            @include mx.generate-properties-from($buttons-active, $key);
                        }
                    }
                }
            }
        }

        @include mx.breakpoint-max($mobile-breakpoint) {
            @each $key, $value in $buttons-mobile {
                &.is-style-#{$key} {
                    .wp-block-button__link {
                        @include mx.generate-properties-from($buttons-mobile, $key);
                    }
                }
            }
        }
    }
}

// For single default style.
@mixin wp-block-button(
    $buttons,
    $button-key,
    $buttons-hover: false,
    $buttons-active: false) {
    // Default button styles. Separate styles also should be create based on theme-block-editor.js.
    .wp-block-button {
        &__link {
            @include mx.generate-properties-from($buttons, $button-key);

            &:hover, &:focus {
                @if $buttons-hover {
                    @include mx.generate-properties-from($buttons-hover, $button-key);
                }
            }

            &:active {
                @if $buttons-active {
                    @include mx.generate-properties-from($buttons-active, $button-key);
                }
            }
        }
    }
}